/*Number of event attendees & number of events by event date
File name: eventkpi.csv. Used for plotting "Number of Events & Event Attendees"*/
SELECT EVENT_DATE, 
count(DISTINCT EVENT.EVENT_ID) AS 'Number of Events', 
count(CONSTITUENT_ID) AS 'Number of Attendee'
FROM EVENT_ATTENDEE
JOIN EVENT
ON EVENT.EVENT_ID=EVENT_ATTENDEE.EVENT_ID
GROUP BY EVENT_DATE;


/*Location of event attendees and non-event attendees, and their amount raised
File name: event1.csv. Used for plotting "Event Attendees & Dollars Raised By Location"*/
SELECT T1.CONSTITUENT_ID, CITY, STATE, COUNTRY, T1.ATTEND_COUNT, COALESCE(T2.TOTAL_AMOUNT,0) AS TOTAL_AMOUNT
FROM (SELECT CONSTITUENT.CONSTITUENT_ID, count(EVENT_ATTENDEE.CONSTITUENT_ID) AS ATTEND_COUNT
FROM CONSTITUENT
LEFT JOIN EVENT_ATTENDEE
ON CONSTITUENT.CONSTITUENT_ID = EVENT_ATTENDEE.CONSTITUENT_ID
GROUP BY CONSTITUENT_ID) AS T1
JOIN
(SELECT CONSTITUENT.CONSTITUENT_ID, CITY, STATE, COUNTRY, round(sum(TRANSACTIONS.AMOUNT),2) AS TOTAL_AMOUNT
FROM CONSTITUENT
LEFT JOIN TRANSACTIONS
ON CONSTITUENT.CONSTITUENT_ID = TRANSACTIONS.CONSTITUENT_ID
GROUP BY CONSTITUENT_ID) AS T2
ON T1.CONSTITUENT_ID = T2.CONSTITUENT_ID;


/*Amount raised by Age Range and Gender. 6,163 transactions of 1,000 constituents who donate
plus 1,000 constituents who did not donate
File name: gender.csv. Used for plotting "Dollars Raised by Age Group & Gender".*/
SELECT CONSTITUENT.CONSTITUENT_ID, IFNULL(AMOUNT,0) as Amount, GENDER,
CASE
 WHEN AGE = 0 THEN 'Unknown'
 WHEN AGE < 18 THEN 'Under 18'
 WHEN AGE BETWEEN 18 AND 24 THEN '18-24'
 WHEN AGE BETWEEN 25 AND 34 THEN '25-34'
 WHEN AGE BETWEEN 35 AND 44 THEN '35-44'
 WHEN AGE BETWEEN 45 AND 54 THEN '45-54'
 WHEN AGE BETWEEN 55 AND 64 THEN '55-64'
 WHEN AGE BETWEEN 65 AND 74 THEN '65-74'
 WHEN AGE >= 75 THEN '75+'
END as 'Age_range'
FROM CONSTITUENT
LEFT JOIN TRANSACTIONS
ON CONSTITUENT.CONSTITUENT_ID=TRANSACTIONS.CONSTITUENT_ID;


/*Amount raised from Event Attendess by Age at Event and Gender.
File name: gender2.csv. Used for plotting AgeRange2, but no included on Dashboard.*/
SELECT CONSTITUENT.CONSTITUENT_ID AS 'Constituent_ID_Event', GENDER AS 'Gender_Event', 
T2.Age_Range_Event AS 'Age_Range_Event', T2.Total_Amount
FROM CONSTITUENT
LEFT JOIN 
(SELECT DISTINCT T1.* FROM (SELECT CONSTITUENT.Constituent_ID,
CASE
	WHEN AGE = 0 THEN 'Unknown'
	WHEN round(avg(AGE-DATEDIFF(curdate(), EVENT_DATE)/365)) < 18 THEN 'Under 18'
	WHEN round(avg(AGE-DATEDIFF(curdate(), EVENT_DATE)/365)) BETWEEN 18 AND 24 THEN '18-24'
	WHEN round(avg(AGE-DATEDIFF(curdate(), EVENT_DATE)/365)) BETWEEN 25 AND 34 THEN '25-34'
	WHEN round(avg(AGE-DATEDIFF(curdate(), EVENT_DATE)/365)) BETWEEN 35 AND 44 THEN '35-44'
	WHEN round(avg(AGE-DATEDIFF(curdate(), EVENT_DATE)/365)) BETWEEN 45 AND 54 THEN '45-54'
	WHEN round(avg(AGE-DATEDIFF(curdate(), EVENT_DATE)/365)) BETWEEN 55 AND 64 THEN '55-64'
	WHEN round(avg(AGE-DATEDIFF(curdate(), EVENT_DATE)/365)) BETWEEN 65 AND 74 THEN '65-74'
	WHEN round(avg(AGE-DATEDIFF(curdate(), EVENT_DATE)/365)) >= 75 THEN '75+'
END as 'Age_Range_Event',
sum(Amount) AS Total_Amount
FROM CONSTITUENT
JOIN TRANSACTIONS
JOIN EVENT
JOIN EVENT_ATTENDEE
ON EVENT.EVENT_ID=EVENT_ATTENDEE.EVENT_ID
AND CONSTITUENT.CONSTITUENT_ID=EVENT_ATTENDEE.CONSTITUENT_ID
AND CONSTITUENT.CONSTITUENT_ID=TRANSACTIONS.CONSTITUENT_ID 
GROUP BY EVENT_DATE, 'Age_range_Event', CONSTITUENT_ID) AS T1) AS T2
ON CONSTITUENT.CONSTITUENT_ID=T2.CONSTITUENT_ID
WHERE T2.Age_Range_Event IS NOT NULL
AND T2.Total_Amount IS NOT NULL;


/*Marital status, Volunteer count, family count, transactions count of 2,000 constituents
File name: combine.csv, used for plotting "Seven Years Revenue Trend By Marital Status & Family Relation"*/
SELECT T1.CONSTITUENT_ID, MARRIED, T2.FAMILY_COUNT, T1.VOLUNTEER_COUNT, T3.TRANSACTIONS_COUNT
FROM (SELECT CONSTITUENT.CONSTITUENT_ID, count(VOLUNTEER.CONSTITUENT_ID) AS VOLUNTEER_COUNT
FROM CONSTITUENT
LEFT JOIN VOLUNTEER
ON CONSTITUENT.CONSTITUENT_ID = VOLUNTEER.CONSTITUENT_ID
GROUP BY CONSTITUENT_ID) AS T1
JOIN
(SELECT CONSTITUENT.CONSTITUENT_ID, MARRIED, count(FAMILY.CONSTITUENT_ID) AS FAMILY_COUNT
FROM CONSTITUENT
LEFT JOIN FAMILY
ON CONSTITUENT.CONSTITUENT_ID = FAMILY.CONSTITUENT_ID
GROUP BY CONSTITUENT_ID) AS T2
JOIN
(SELECT CONSTITUENT.CONSTITUENT_ID, count(TRANSACTIONS.CONSTITUENT_ID) AS TRANSACTIONS_COUNT
FROM CONSTITUENT
LEFT JOIN TRANSACTIONS
ON CONSTITUENT.CONSTITUENT_ID = TRANSACTIONS.CONSTITUENT_ID
GROUP BY CONSTITUENT_ID) AS T3
ON T1.CONSTITUENT_ID=T2.CONSTITUENT_ID
AND T1.CONSTITUENT_ID=T3.CONSTITUENT_ID;